import sys
import os.path
import shlex
import argparse

# create a g++/clang style option parser
cc_command_parser = argparse.ArgumentParser()
cc_command_parser.add_argument('-o', action='store', dest='output_file')
cc_command_parser.add_argument('-I', action='append', dest='include_dirs')
cc_command_parser.add_argument('-L', action='append', dest='library_dirs')
cc_command_parser.add_argument('-l', action='append', dest='link_libraries')
cc_command_parser.add_argument('-D', action='append', dest='defines')
cc_command_parser.add_argument('-W', action='append', dest='passthrough_args')
cc_command_parser.add_argument('-isystem', action='append', dest='system_include_dirs')
cc_command_parser.add_argument('-c', action='store_true', dest='compile_only')

def find_ros_packages(path):
    package_dirs = set()
    for root, dirs, files in os.walk(path):
        for filename in files:
            if filename == 'package.xml':
                package_dirs.add(root)
    return package_dirs

class Target:
    def __init__(self):
        self.deps = set()

def parse_cxx_target(tokens):
    ns, args = cc_command_parser.parse_known_args(tokens)
    target = Target()

    target.output_file = ns.output_file
    target.include_dirs = ns.include_dirs
    target.system_include_dirs = ns.system_include_dirs
    target.library_dirs = ns.library_dirs
    target.link_libraries = ns.link_libraries

    for arg in args:
        if arg[:1] == '-':
            # this is just some compiler option we don't know about
            continue

        # this is a dependency (.o, .so, or source file)
        target.deps.add(arg)

    return target

def is_source(target_name):
   return os.path.splitext(target_name)[1] in ['.c', '.cpp', '.cc', '.cxx', '.h', '.hpp', '.hh']

def is_library(target_name):
   return os.path.splitext(target_name)[1] in ['.so']

def is_executable(target_name):
   return os.path.splitext(target_name)[1] == ''

def recursive_find_source_files(target_name, targets):
    if is_source(target_name) or target_name not in targets:
        # this is a source file
        return set([target_name])
    else:
        deps = set()
        for dep in targets[target_name].deps:
            deps.update(recursive_find_source_files(dep, targets))
        return deps

def pprint_targets(targets):
    for target_name in targets:
        if is_library(target_name) or is_executable(target_name):
            print target_name
            source_files = recursive_find_source_files(target_name, targets)
            for filename in source_files:
                print '    %s' % filename
        print ''

compiler = '/usr/bin/c++'

make_lines = open(sys.argv[1]).readlines()

targets = {}

for line in make_lines:
    try:
        tokens = shlex.split(line)
    except ValueError:
        pass

    if tokens[0] == compiler:
        # this line is a compiler call; parse it
        target = parse_cxx_target(tokens[1:])
        targets[target.output_file] = target
pprint_targets(targets)
